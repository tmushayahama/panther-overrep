/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { FormSubmitEvent, OntologyOption } from "./components/overrep-form/overrep-form";
export { FormSubmitEvent, OntologyOption } from "./components/overrep-form/overrep-form";
export namespace Components {
    interface OverrepForm {
        "exampleGenes": string[];
        "examplesLabel": string;
        "geneIdsLabel": string;
        "hint": string;
        "ontologyLabel": string;
        "ontologyOptions": OntologyOption[];
        "showHint": boolean;
        "species": string;
        "submitLabel": string;
        "submitUrl": string;
        "testType": string;
        "textareaRows": number;
    }
}
export interface OverrepFormCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOverrepFormElement;
}
declare global {
    interface HTMLOverrepFormElementEventMap {
        "overrepSubmit": FormSubmitEvent;
    }
    interface HTMLOverrepFormElement extends Components.OverrepForm, HTMLStencilElement {
        addEventListener<K extends keyof HTMLOverrepFormElementEventMap>(type: K, listener: (this: HTMLOverrepFormElement, ev: OverrepFormCustomEvent<HTMLOverrepFormElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLOverrepFormElementEventMap>(type: K, listener: (this: HTMLOverrepFormElement, ev: OverrepFormCustomEvent<HTMLOverrepFormElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLOverrepFormElement: {
        prototype: HTMLOverrepFormElement;
        new (): HTMLOverrepFormElement;
    };
    interface HTMLElementTagNameMap {
        "overrep-form": HTMLOverrepFormElement;
    }
}
declare namespace LocalJSX {
    interface OverrepForm {
        "exampleGenes"?: string[];
        "examplesLabel"?: string;
        "geneIdsLabel"?: string;
        "hint"?: string;
        "onOverrepSubmit"?: (event: OverrepFormCustomEvent<FormSubmitEvent>) => void;
        "ontologyLabel"?: string;
        "ontologyOptions"?: OntologyOption[];
        "showHint"?: boolean;
        "species"?: string;
        "submitLabel"?: string;
        "submitUrl"?: string;
        "testType"?: string;
        "textareaRows"?: number;
    }
    interface IntrinsicElements {
        "overrep-form": OverrepForm;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "overrep-form": LocalJSX.OverrepForm & JSXBase.HTMLAttributes<HTMLOverrepFormElement>;
        }
    }
}
